{
    "sourceFile": "GFC-FE-APP-main/GFC-FE-APP-main/src/components/contexts/documents-context.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1752948184966,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1752948184966,
            "name": "Commit-0",
            "content": "import { createContext, useCallback, useContext, useEffect, useMemo, useState } from \"react\";\r\nimport useAxios from \"utils/axios\";\r\nimport { REQUEST_URLS, HTTP_METHODS, LOADING, REQUEST_SUCCESS_MESSAGES, REQUEST_FAILURE_MESSAGES } from \"utils/constants\";\r\nimport { debounce } from \"utils/util\";\r\nimport { useAuth } from \"./auth-context\";\r\n\r\n// context to get all documents\r\nconst DocumentsNameContext = createContext<null | any>(null);\r\n\r\n// provides the documents to child components\r\nconst DocumentsNameContextProvider: React.FC<any> = ({ children }) => {\r\n  let { HttpRequestController, handlePromiseRequest } = useAxios();\r\n  const [files, setFiles] = useState([]);\r\n  let { isLoggedIn, user } = useAuth();\r\n\r\n  // stores the filtered documents based on search key\r\n  const [filteredFiles, setFilteredFiles] = useState(files);\r\n\r\n  // retrives all the documents created by the user\r\n  const getDocuments = useCallback(async () => {\r\n    let res = await HttpRequestController(REQUEST_URLS.GET_ALL_DOCUMENTS, HTTP_METHODS.POST, { userId: user.userId });\r\n    setFiles(res?.documents || []);\r\n  }, [user]);\r\n\r\n  useEffect(() => {\r\n    setFilteredFiles(files || []);\r\n  }, [files]);\r\n\r\n  useEffect(() => {\r\n    if (isLoggedIn) {\r\n      // handlePromiseRequest(getDocuments, LOADING, '', REQUEST_FAILURE_MESSAGES.DOCUMENT_LOADING_FAILED);\r\n      getDocuments();\r\n    }\r\n  }, [isLoggedIn]);\r\n\r\n  // to filter documents based on search key entered by user\r\n  const filterFiles = (value: string) => {\r\n    const filtered = files.filter((item: any) =>\r\n      item.documentName.toLowerCase().includes(value.toLowerCase())\r\n    );\r\n    setFilteredFiles(filtered);\r\n  }\r\n\r\n  const handleInputChange = useCallback(debounce(filterFiles, 300), [filterFiles]);\r\n\r\n  const contextValue = useMemo(() => ({\r\n    files,\r\n    filteredFiles,\r\n    handleInputChange,\r\n    setFiles\r\n  }), [filteredFiles, isLoggedIn]);\r\n\r\n  return (\r\n    <DocumentsNameContext.Provider value={contextValue} >\r\n      {children}\r\n    </DocumentsNameContext.Provider>\r\n  );\r\n}\r\n\r\nconst useDocumentsName = () => {\r\n  const context = useContext(DocumentsNameContext);\r\n  if (context === undefined)\r\n    throw new Error(\"DocumentNamesContext was used outside of the DocumentsNameContextProvider\");\r\n  return context;\r\n}\r\n\r\nexport { DocumentsNameContextProvider, useDocumentsName };\r\n"
        }
    ]
}