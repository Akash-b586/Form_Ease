{
    "sourceFile": "GFC-FE-APP-main/GFC-FE-APP-main/src/components/Mainbody/Mainbody.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1752656141068,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1752656141068,
            "name": "Commit-0",
            "content": "import { Button, IconButton, Tooltip, Dialog, DialogTitle, DialogContent, DialogActions } from \"@mui/material\";\r\nimport FolderOpenSharpIcon from '@mui/icons-material/FolderOpenSharp';\r\nimport StorageSharpIcon from '@mui/icons-material/StorageSharp';\r\nimport { useEffect, useState } from \"react\";\r\nimport { Card } from \"./Card\";\r\nimport { FOLDER_VIEW_TYPE, HTTP_METHODS, REQUEST_URLS, REQUEST_IN_PROGRESS, REQUEST_SUCCESS_MESSAGES, REQUEST_FAILURE_MESSAGES } from \"../../utils/constants\";\r\nimport \"./Mainbody.scss\";\r\nimport { useDocumentsName } from \"components/contexts/documents-context\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { DataGrid, GridColDef } from \"@mui/x-data-grid\";\r\nimport useAxios from \"utils/axios\";\r\n\r\nexport default function Mainbody() {\r\n  // view document list in table or like files\r\n  const [type, setType] = useState(FOLDER_VIEW_TYPE.FILE);\r\n  const { filteredFiles, setFiles, files } = useDocumentsName();\r\n  const navigate = useNavigate();\r\n  const { HttpRequestController, isRequestPending, handlePromiseRequest } = useAxios();\r\n  \r\n  // State for delete confirmation dialog\r\n  const [deleteDialogOpen, setDeleteDialogOpen] = useState(false);\r\n  const [documentToDelete, setDocumentToDelete] = useState<string | null>(null);\r\n\r\n  // opens the document\r\n  const openForm = (documentId: string) => {\r\n    navigate(`/forms/${documentId}`, { state: { edit: true } });\r\n  }\r\n\r\n  // Delete form function\r\n  const deleteForm = (documentId: string) => {\r\n    setDocumentToDelete(documentId);\r\n    setDeleteDialogOpen(true);\r\n  };\r\n\r\n  const sendDeleteRequest = async () => {\r\n    if (!documentToDelete) return;\r\n    \r\n    const res = await HttpRequestController(REQUEST_URLS.DELETE_DOCUMENT + `/${documentToDelete}`, HTTP_METHODS.DELETE);\r\n    if (res) {\r\n      setFiles(files.filter((file: any) => {\r\n        return file._id !== res.documentId\r\n      }));\r\n      setDeleteDialogOpen(false);\r\n      setDocumentToDelete(null);\r\n    }\r\n  };\r\n\r\n  const handleDeleteConfirm = () => {\r\n    handlePromiseRequest(sendDeleteRequest, REQUEST_IN_PROGRESS, REQUEST_SUCCESS_MESSAGES.DOCUMENT_DELETED_SUCCESSFULLY,\r\n      REQUEST_FAILURE_MESSAGES.DOCUMENT_DELETION_FAILED);\r\n  };\r\n\r\n  const handleDeleteCancel = () => {\r\n    setDeleteDialogOpen(false);\r\n    setDocumentToDelete(null);\r\n  };\r\n\r\n  let [rows, setRows] = useState<any>([]);\r\n\r\n  let columns: GridColDef[] = [\r\n    { field: 'id', headerName: 'ID', flex: 1 },\r\n    { field: 'documentName', headerName: 'Document Name', flex: 1 },\r\n    { field: 'createdOn', headerName: 'Created On', flex: 2 },\r\n    { field: 'updatedOn', headerName: 'Updated On', flex: 2 },\r\n    {\r\n      field: \"action\",\r\n      align: \"center\",\r\n      flex: 2,\r\n      headerName: \"Actions\",\r\n      sortable: false,\r\n      renderCell: (params: any) => {\r\n        const onOpenClick = () => {\r\n          openForm(filteredFiles[params.row.id - 1]._id);\r\n        };\r\n        \r\n        const onDeleteClick = () => {\r\n          deleteForm(filteredFiles[params.row.id - 1]._id);\r\n        };\r\n        \r\n        return (\r\n          <div style={{ display: 'flex', gap: '8px' }}>\r\n            <Button variant=\"contained\" color=\"primary\" onClick={onOpenClick} size=\"small\">\r\n              Open\r\n            </Button>\r\n            <Button variant=\"outlined\" color=\"error\" onClick={onDeleteClick} size=\"small\">\r\n              Delete\r\n            </Button>\r\n          </div>\r\n        );\r\n      }\r\n    }\r\n  ];\r\n\r\n  useEffect(() => {\r\n    let data: { id: number, documentName: string; createdOn: string; updatedOn: string; }[] = [];\r\n    filteredFiles.map((element: any, index: number) => {\r\n      return data.push({ \"id\": index + 1, \"documentName\": element.documentName, \"createdOn\": element.createdOn, \"updatedOn\": element.updatedOn });\r\n    });\r\n    // showing the filtered files\r\n    setRows(data);\r\n  }, [filteredFiles]);\r\n\r\n  return <div className=\"docs-section\">\r\n    <div className=\"header\">\r\n      <div className=\"header-left\">\r\n        Recent forms\r\n      </div>\r\n\r\n      <div className=\"header-right\">\r\n        <Tooltip title=\"Table View\">\r\n          <IconButton onClick={() => { setType(FOLDER_VIEW_TYPE.ROWS); }}>\r\n            <StorageSharpIcon style={{ fontSize: \"16px\", color: \"black\" }} />\r\n          </IconButton>\r\n        </Tooltip>\r\n        <Tooltip title=\"Folder View\">\r\n          <IconButton onClick={() => { setType(FOLDER_VIEW_TYPE.FILE); }}>\r\n            <FolderOpenSharpIcon style={{ fontSize: \"16px\", color: \"black\" }} />\r\n          </IconButton>\r\n        </Tooltip>\r\n      </div>\r\n    </div>\r\n\r\n    {/* document details will be displayed like files  */}\r\n    {type == FOLDER_VIEW_TYPE.FILE && (\r\n      <div className=\"docs-container\">\r\n        {filteredFiles && filteredFiles.length > 0 ? (\r\n          filteredFiles.map((ele: any, i: string) => <Card key={'id' + i} document={ele} openForm={openForm} deleteForm={deleteForm} />)\r\n        ) : (\r\n          <div style={{ textAlign: \"center\", fontSize: \"20px\" }}>\r\n            No records found\r\n          </div>\r\n        )}\r\n      </div>\r\n    )}\r\n\r\n    {/* document details will be displayed inside table  */}\r\n    {type == FOLDER_VIEW_TYPE.ROWS && (\r\n      <div style={{ maxHeight: \"1000\", display: 'flex', justifyContent: 'center' }}>\r\n        <div style={{ width: '100%' }}>\r\n          {\r\n            (<DataGrid\r\n              rows={rows}\r\n              columns={columns}\r\n              initialState={{\r\n                pagination: {\r\n                  paginationModel: { page: 0, pageSize: 5 },\r\n                },\r\n              }}\r\n              pageSizeOptions={[5, 7]}\r\n            />)\r\n          }\r\n        </div>\r\n      </div>\r\n    )}\r\n\r\n    {/* Delete Confirmation Dialog */}\r\n    <Dialog open={deleteDialogOpen} onClose={handleDeleteCancel}>\r\n      <DialogTitle>Delete Form</DialogTitle>\r\n      <DialogContent>\r\n        Are you sure you want to delete this form? This action cannot be undone.\r\n      </DialogContent>\r\n      <DialogActions>\r\n        <Button onClick={handleDeleteCancel} color=\"inherit\">\r\n          Cancel\r\n        </Button>\r\n        <Button \r\n          onClick={handleDeleteConfirm} \r\n          color=\"error\" \r\n          variant=\"contained\"\r\n          disabled={isRequestPending}\r\n        >\r\n          Delete\r\n        </Button>\r\n      </DialogActions>\r\n    </Dialog>\r\n  </div>\r\n}\r\n"
        }
    ]
}