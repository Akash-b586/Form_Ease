{
    "sourceFile": "GFC-FE-APP-main/GFC-FE-APP-main/src/components/userview/UserResponseView.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1752948184966,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1752948184966,
            "name": "Commit-0",
            "content": "\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport useAxios from \"utils/axios\";\r\nimport { REQUEST_URLS, HTTP_METHODS, QUESTION_TYPES, INTERNAL_SERVER_ERROR, LOADING, REQUEST_SUCCESS_MESSAGES } from \"utils/constants\";\r\nimport { Question } from \"utils/Question\";\r\nimport \"./UserResponseStyles.scss\";\r\nimport { Typography } from \"@mui/material\";\r\nimport { MultipleChoiceQuestion, CheckboxQuestion, DateQuestion, TimeQuestion, ShortAnswerQuestion } from \"components/common/Formcontols\";\r\n\r\nexport const UserResponseView: React.FC<any> = ({ userId }) => {\r\n  const params = useParams();\r\n  const { HttpRequestController, handlePromiseRequest } = useAxios();\r\n  const [formData, setFormData] = useState<any>();\r\n  const [answers, setAnswers] = useState<any>({});\r\n\r\n  const loadResponse = async () => {\r\n    let formResponse = await HttpRequestController(REQUEST_URLS.USER_RESPONSE + `/${userId}` + `/${params.documentId}`,\r\n      HTTP_METHODS.GET);\r\n\r\n    setFormData({\r\n      questions: formResponse.questions,\r\n      documentName: formResponse.documentName,\r\n      documentDescription: formResponse.documentDescription\r\n    });\r\n\r\n    setAnswers({\r\n      answers: formResponse.answers\r\n    });\r\n  }\r\n\r\n  // loads the user reponse\r\n  useEffect(() => {\r\n    // handlePromiseRequest(loadResponse, LOADING, '', INTERNAL_SERVER_ERROR);\r\n    loadResponse();\r\n  }, []);\r\n\r\n  return <div className=\"response-form\">\r\n    {\r\n      formData && (<div className=\"response-container\">\r\n        <div className=\"section\">\r\n          <div className=\"response-box add-border-top\">\r\n            <div>\r\n              <input\r\n                type=\"text\"\r\n                className=\"form-top-name\"\r\n                placeholder=\"Untitled form\"\r\n                value={formData?.documentName}\r\n                readOnly={true}\r\n              />\r\n              <input\r\n                type=\"text\"\r\n                className=\"form-top-desc\"\r\n                placeholder=\"Document description\"\r\n                value={formData?.documentDescription}\r\n                readOnly={true}\r\n              />\r\n            </div>\r\n          </div>\r\n          {\r\n            formData?.questions?.map((question: Question, index: number) => {\r\n              return <div className=\"response-box\">\r\n                <div className=\"saved-questions\">\r\n                  <Typography className=\"question-text\">\r\n                    {((index + 1).toString() + \". \" + question.question).trim()}\r\n                  </Typography>\r\n                  <DisplayOption question={question} showQuestionPaper={false} onChange={() => { }} answered={Object.keys(answers).length > 0 && answers.answers ? answers.answers[question._id] : undefined} />\r\n                </div>\r\n              </div>\r\n            })\r\n          }\r\n        </div>\r\n      </div>)\r\n    }\r\n  </div>\r\n}\r\n\r\n// displaying the options and the response given by the user\r\nconst DisplayOption: React.FC<any> = ({ question, showQuestionPaper, onChange, answered }) => {\r\n  switch (question.questionType) {\r\n    case QUESTION_TYPES.RADIO: {\r\n      return <MultipleChoiceQuestion question={question} options={question.options} onChange={onChange} answered={answered} />\r\n    }\r\n    case QUESTION_TYPES.CHECKBOX: {\r\n      return <CheckboxQuestion question={question} options={question.options} onChange={onChange} answered={answered} />\r\n    }\r\n    case QUESTION_TYPES.DATE: {\r\n      return <DateQuestion question={question} onChange={onChange} answered={answered} />\r\n    }\r\n    case QUESTION_TYPES.TIME: {\r\n      return <TimeQuestion question={question} onChange={onChange} answered={answered} />\r\n    }\r\n    case QUESTION_TYPES.TEXT: {\r\n      return <ShortAnswerQuestion question={question} onChange={onChange}\r\n        showQuestionPaper={showQuestionPaper} answered={answered} />\r\n    }\r\n    default: {\r\n      return <div></div>\r\n    }\r\n  }\r\n}\r\n"
        }
    ]
}